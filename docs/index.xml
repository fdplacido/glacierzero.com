<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GlacierZero</title>
    <link>https://glacierzero.com/</link>
    <description>Recent content on GlacierZero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 11 Apr 2022 10:03:17 +0200</lastBuildDate><atom:link href="https://glacierzero.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Spack package manager for supercomputers to install software locally</title>
      <link>https://glacierzero.com/posts/using_spack/</link>
      <pubDate>Mon, 11 Apr 2022 10:03:17 +0200</pubDate>
      
      <guid>https://glacierzero.com/posts/using_spack/</guid>
      
      <description>&lt;p&gt;I often find myself building software in different machines, with different configurations, architectures and compilers. Sometimes I just need to install some package in a server with not enough permissions to do so via the regular package manager.&lt;/p&gt;
&lt;p&gt;Spack to the rescue!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see an example where one wants to use &lt;a href=&#34;./posts/tmux_workflow_nov21/&#34;&gt;tmux&lt;/a&gt; in a machine where it is not installed, nor one has permissions to do so. Given that python is present in the system, and a compiler, one can try to compile tmux, to quickly find it will need several dependencies like libevent. Spack allows us to quickly check those dependencies:&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Using Go Maps: pointers and value types</title>
      <link>https://glacierzero.com/posts/go_maps_usage/</link>
      <pubDate>Mon, 14 Feb 2022 00:11:38 +0100</pubDate>
      
      <guid>https://glacierzero.com/posts/go_maps_usage/</guid>
      
      <description>&lt;p&gt;Hash maps are often a good data structure when we want to access or store pairs of associated data; pairs commonly known as key-value.&lt;/p&gt;
&lt;p&gt;What makes a hash table (a map) a great data structure is that internally it will compute an index based on the key, that will point us to where our value is. This is what makes them so fast to insert &lt;em&gt;O(1)&lt;/em&gt;, delete &lt;em&gt;O(1)&lt;/em&gt; and search &lt;em&gt;O(1)&lt;/em&gt; for most cases (on average) with unordered data, while taking &lt;em&gt;O(n)&lt;/em&gt; space. This makes them much faster (on average) than arrays to search, insert and delete elements on it.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Names of symbols when programming, in english</title>
      <link>https://glacierzero.com/posts/symbol_names_english/</link>
      <pubDate>Wed, 19 Jan 2022 01:12:42 +0100</pubDate>
      
      <guid>https://glacierzero.com/posts/symbol_names_english/</guid>
      
      <description>&lt;p&gt;Some will disagree since this differs between countries, regions or even companies. But this should be a common ground that everyone can understand what one is referring to. Probably brackets are the most controversial.&lt;/p&gt;
&lt;p&gt;This are the most common names to refer to various symbols often found when programming:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;()  : brackets / parenthesis
[]  : square brackets
{}  : curly brackets
&amp;lt;&amp;gt;  : angle brackets
&amp;#34;   : double quote
&amp;#39;   : single quote
`   : backquote
#   : hash
-   : dash
_   : underscore
:   : colon
;   : semicolon
.   : period
@   : at
&amp;amp;   : ampersand
/   : slash
\   : backslash
|   : pipe
~   : tilde
^   : caret
*   : asterisk
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Github keyboard shortcuts to move around faster and productively</title>
      <link>https://glacierzero.com/posts/github_usage_dec21/</link>
      <pubDate>Tue, 07 Dec 2021 22:18:34 +0100</pubDate>
      
      <guid>https://glacierzero.com/posts/github_usage_dec21/</guid>
      
      <description>&lt;p&gt;If you often browse Github repositories on your browser, chances are you find yourself moving between files, jumping between lines, reviewing &lt;em&gt;diffs&lt;/em&gt; and other common source code related tasks. Github has a list of commands&lt;a href=&#34;./posts/github_usage_dec21/#r1-github-commands&#34;&gt;[1]&lt;/a&gt; and keyboard shortcuts&lt;a href=&#34;./posts/github_usage_dec21/#r2-github-shortcuts&#34;&gt;[2]&lt;/a&gt; to move around faster.&lt;/p&gt;
&lt;p&gt;Here are the keyboard shortcuts that I find myself using more often to navigate and interact with Github repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + k&lt;/code&gt;: Open &lt;strong&gt;command palette&lt;/strong&gt; with fuzzy search
&lt;ul&gt;
&lt;li&gt;From here you make a wide range of actions by just writting: where you want to, or what you want to do&lt;/li&gt;
&lt;li&gt;Search is fuzzy, so you don&amp;rsquo;t even need to type the complete command, or even correctly&lt;/li&gt;
&lt;li&gt;Navigate between tabs, just type: issues, PRs, Actions, Settings&lt;/li&gt;
&lt;li&gt;Navigate between repositories: delete the repository name, and start writing a different one which belogs to the user or organization&lt;/li&gt;
&lt;li&gt;Run commands by typing &lt;code&gt;&amp;gt;&lt;/code&gt;. From here one can run things like: creating an issue, close a pull request or updating the current branch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt;: File finder
&lt;ul&gt;
&lt;li&gt;When you know the name of the file you are looking for, or part of it, just start typing it to filter the possible results&lt;/li&gt;
&lt;li&gt;Easy to filter by extension or some other pattern in the file name: type part of the name, then &lt;code&gt;.&lt;/code&gt; followed by the extension to filter further&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;: Go to line
&lt;ul&gt;
&lt;li&gt;With a file opened, jump directly to some line by typing the number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt;: Switch to a branch or tag
&lt;ul&gt;
&lt;li&gt;To quickly change to some branch or tag if you know the name or part of the name of it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt;: Edit file
&lt;ul&gt;
&lt;li&gt;I don&amp;rsquo;t find myself using this one much, but some quick or small changes it may be useful when you are not working with your local editor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;: Open in web editor
&lt;ul&gt;
&lt;li&gt;If not working in your own machine, only have access to a browser, or don&amp;rsquo;t have access to your everyday source code editor or IDE, this option gives you an online IDE. It is an online instance of &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;, with all of its features, one of the outcomes of Microsoft buying Github.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Full reference of the keyboard shortctus and command palette options:&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>tmux: productive cli workflow</title>
      <link>https://glacierzero.com/posts/tmux_workflow_nov21/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://glacierzero.com/posts/tmux_workflow_nov21/</guid>
      
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;Tmux&lt;/a&gt; has 2 main functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creating, accessing and managing terminals from a single screen&lt;/li&gt;
&lt;li&gt;Detaching and reattaching to the session: it allows you to continue were you left&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here I share the workflow I use everyday at work and my personal computer, explaining with it what I believe are the core features of tmux.&lt;/p&gt;
&lt;h2 id=&#34;why-tmux&#34;&gt;Why tmux&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tmux&lt;/code&gt; is a tool to organize yourself in your terminal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create and close windows&lt;/li&gt;
&lt;li&gt;names windows for easier organization&lt;/li&gt;
&lt;li&gt;split windows vertically and/or horizontally into panes as much as you want&lt;/li&gt;
&lt;li&gt;focus on some specific pane&lt;/li&gt;
&lt;li&gt;move around between windows and panes&lt;/li&gt;
&lt;li&gt;detach from a session and come back days later and continue everything were you left it&lt;/li&gt;
&lt;li&gt;share sessions between computers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many of these things can be achieved with other tools, or combination of tools. Some terminals can split windows, in other you can open as many tabs or windows you want, other tools allow you to resume your work after closing a terminal.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://glacierzero.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://glacierzero.com/about/</guid>
      
      <description>&lt;p&gt;Hi there! I&amp;rsquo;m Plácido Fernández. I live in canton Vaud, Switzerland.&lt;/p&gt;
&lt;p&gt;I am tech lead working in Finance.
I did my PhD in Computer Science and Technology at CERN, Switzerland, at the &lt;a href=&#34;https://lhcb-public.web.cern.ch/&#34;&gt;LHCb&lt;/a&gt; experiment, with University Carlos III of Madrid.
Prior to my experience in Computing for High Energy Physics I worked in the space industry, at &lt;a href=&#34;https://www.gmv.com/en&#34;&gt;GMV&lt;/a&gt;, developing software for satellite control centers. Before that I did an intership at &lt;a href=&#34;https://www.thalesgroup.com/en&#34;&gt;Thales&lt;/a&gt; in the rail signaling area.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://glacierzero.com/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://glacierzero.com/archive/</guid>
      
      <description></description>
      
    </item>
    
  </channel>
</rss>
