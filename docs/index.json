[{"content":"Hash maps are often a good data structure when we want to access or store pairs of associated data; pairs commonly known as key-value.\nWhat makes a hash table (a map) a great data structure is that internally it will compute an index based on the key, that will point us to where our value is. This is what makes them so fast to insert O(1), delete O(1) and search O(1) for most cases (on average) with unordered data, while taking O(n) space. This makes them much faster (on average) than arrays to search, insert and delete elements on it.\nGiven a key, we directly know where in memory our value will be. Not everything is great about hash tables though. Elements will be sparsely distributed in memory, which makes it cache un-friendly, you can have collisions when generating the indices, and the worst-case scenarios are usually O(n) and must be taken into consideration.\nGo lang inadvertently exposes some of this behaviour when trying to perform certain operations on them, like assigning a struct field in a map. Using go maps one may try to do something like this:\npackage main type MyStruct struct { ID int Amount float64 } func main() { operations := make(map[string]MyStruct) operations[\u0026#34;Name1\u0026#34;] = MyStruct{256, 1.234} operations[\u0026#34;Name1\u0026#34;].Amount = 5.678 } for what we would get the following error:\n./got1.go:11:32: cannot assign to struct field operations[\u0026#34;Name1\u0026#34;].Amount in map We can add new key-values to the map with no issue:\noperations[\u0026#34;Name2\u0026#34;] = MyStruct{128, 9.876} But we cannot modify an existing struct value. This is because in Go, map values are not addressable. In Go maps values can change their location in memory, for example when a hash map grows it may reallocate to use extra space; in that case the old memory locations will become invalid, so assigning this way is not allowed.\nThere are various solutions or ways around this issue. We can read the value into a new variable and then assign the new variable to that key:\noperations := make(map[string]MyStruct) operations[\u0026#34;Name1\u0026#34;] = MyStruct{256, 1.234} mod_op := operations[\u0026#34;Name1\u0026#34;] mod_op.Amount = 5.678 operations[\u0026#34;Name1\u0026#34;] = mod_op A similar approach is to check if there is a value: Go returns a copy of the value and a bool to know if there was a value or not. Since we get a copy of the value, we can modify it and re-assign it:\noperations := make(map[string]MyStruct) operations[\u0026#34;Name1\u0026#34;] = MyStruct{256, 1.234} if op, ok := operations[\u0026#34;Name1\u0026#34;]; ok { op.Amount = 5.678 operations[\u0026#34;Name1\u0026#34;] = op } else { // not ok: There was no value for \u0026#34;Name1\u0026#34; } A third approach is to directly use pointers: a map of keys to pointers to values. This approach can have a performance benefit, specially for big structs if these are being copied:\noperations := make(map[string]*MyStruct) operations[\u0026#34;Name1\u0026#34;] = \u0026amp;MyStruct{256, 1.234} operations[\u0026#34;Name1\u0026#34;].Amount = 5.678 Go lang Map design is tricky when coming from other languages. Under the hood maps are pointers to to runtime.hmap, and not values as one might expect, causing the confusion.\n","permalink":"https://glacierzero.com/blog/go_maps_usage/","summary":"Hash maps are often a good data structure when we want to access or store pairs of associated data; pairs commonly known as key-value.\nWhat makes a hash table (a map) a great data structure is that internally it will compute an index based on the key, that will point us to where our value is. This is what makes them so fast to insert O(1), delete O(1) and search O(1) for most cases (on average) with unordered data, while taking O(n) space.","title":"Using Go Maps: pointers and value types"},{"content":"Some will disagree since this differs between countries, regions or even companies. But this should be a common ground that everyone can understand what one is referring to. Probably brackets are the most controversial.\nThis are the most common names to refer to various symbols often found when programming:\n() : brackets / parenthesis [] : square brackets {} : curly brackets \u0026lt;\u0026gt; : angle brackets \u0026quot; : double quote ' : single quote ` : backquote # : hash - : dash _ : underscore : : colon ; : semicolon . : period @ : at \u0026amp; : ampersand / : slash \\ : backslash | : pipe ~ : tilde ^ : caret * : asterisk ","permalink":"https://glacierzero.com/blog/symbol_names_english/","summary":"Some will disagree since this differs between countries, regions or even companies. But this should be a common ground that everyone can understand what one is referring to. Probably brackets are the most controversial.\nThis are the most common names to refer to various symbols often found when programming:\n() : brackets / parenthesis [] : square brackets {} : curly brackets \u0026lt;\u0026gt; : angle brackets \u0026quot; : double quote ' : single quote ` : backquote # : hash - : dash _ : underscore : : colon ; : semicolon .","title":"Names of symbols when programming, in english"},{"content":"If you often browse Github repositories on your browser, chances are you find yourself moving between files, jumping between lines, reviewing diffs and other common source code related tasks. Github has a list of commands[1] and keyboard shortcuts[2] to move around faster.\nHere are the keyboard shortcuts that I find myself using more often to navigate and interact with Github repositories:\n Ctrl + k: Open command palette with fuzzy search  From here you make a wide range of actions by just writting: where you want to, or what you want to do Search is fuzzy, so you don\u0026rsquo;t even need to type the complete command, or even correctly Navigate between tabs, just type: issues, PRs, Actions, Settings Navigate between repositories: delete the repository name, and start writing a different one which belogs to the user or organization Run commands by typing \u0026gt;. From here one can run things like: creating an issue, close a pull request or updating the current branch   t: File finder  When you know the name of the file you are looking for, or part of it, just start typing it to filter the possible results Easy to filter by extension or some other pattern in the file name: type part of the name, then . followed by the extension to filter further   l: Go to line  With a file opened, jump directly to some line by typing the number   w: Switch to a branch or tag  To quickly change to some branch or tag if you know the name or part of the name of it   e: Edit file  I don\u0026rsquo;t find myself using this one much, but some quick or small changes it may be useful when you are not working with your local editor   .: Open in web editor  If not working in your own machine, only have access to a browser, or don\u0026rsquo;t have access to your everyday source code editor or IDE, this option gives you an online IDE. It is an online instance of VSCode, with all of its features, one of the outcomes of Microsoft buying Github.    Full reference of the keyboard shortctus and command palette options:\n Github command palette Full list of Github keyboard shortcuts\n References - [1]: https://docs.github.com/en/get-started/using-github/github-command-palette - [2]: https://docs.github.com/en/get-started/using-github/keyboard-shortcuts ","permalink":"https://glacierzero.com/blog/github_usage_dec21/","summary":"If you often browse Github repositories on your browser, chances are you find yourself moving between files, jumping between lines, reviewing diffs and other common source code related tasks. Github has a list of commands[1] and keyboard shortcuts[2] to move around faster.\nHere are the keyboard shortcuts that I find myself using more often to navigate and interact with Github repositories:\n Ctrl + k: Open command palette with fuzzy search  From here you make a wide range of actions by just writting: where you want to, or what you want to do Search is fuzzy, so you don\u0026rsquo;t even need to type the complete command, or even correctly Navigate between tabs, just type: issues, PRs, Actions, Settings Navigate between repositories: delete the repository name, and start writing a different one which belogs to the user or organization Run commands by typing \u0026gt;.","title":"Github keyboard shortcuts to move around faster and productively"},{"content":"Tmux has 2 main functions:\n Creating, accessing and managing terminals from a single screen Detaching and reattaching to the session: it allows you to continue were you left  Here I share the workflow I use everyday at work and my personal computer, explaining with it what I believe are the core features of tmux.\nWhy tmux tmux is a tool to organize yourself in your terminal:\n create and close windows names windows for easier organization split windows vertically and/or horizontally into panes as much as you want focus on some specific pane move around between windows and panes detach from a session and come back days later and continue everything were you left it share sessions between computers  Many of these things can be achieved with other tools, or combination of tools. Some terminals can split windows, in other you can open as many tabs or windows you want, other tools allow you to resume your work after closing a terminal.\nBut tmux is a central place to do all this, it is indepent from the application you use to access a terminal, and you can use it in remote servers to keep using your workflow. One only needs to learn the shortcuts, which work around a prefix key followed by some other key or keys: ctrl + b by default.\nWith it I can open any number of files in my text editor of choice, arranged in splits or windows however I prefer. I can be compiling some big project in one windows, then switch to other window to start a web server while the other window is compiling, then jump to a window with two files opened split vertically to compare them. And at the end of the day I can just detach, and continue were I left the day after: same arrangement, windows.\nLong running tasks like compilation or tests may be left running in background without a remote session being killed for inactivity.\nSessions Sessions allow to manage groups of windows, one can connect and disconnect from these, like changing projects or workspaces. I almost never use more than one session: I just connect and work with the same session.\n# Create new named session tmux new -s \u0026lt;session name\u0026gt; # attach to named session tmux a -t \u0026lt;name\u0026gt; tmux attach -t \u0026lt;name\u0026gt; # detach from session prefix + d # attach to last used session tmux a Whenever I start a terminal I automatically connect to it through my .bashrc file with the following:\n####################################################### # Load tmux on first terminal ####################################################### # 1. check existance of tmux command # 2. check for interactive shell (PS1) # 3. Avoid tmux (and screen) running within itself if command -v tmux \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; [ -n \u0026#34;$PS1\u0026#34; ] \u0026amp;\u0026amp; [[ ! \u0026#34;$TERM\u0026#34; =~ screen ]] \u0026amp;\u0026amp; [[ ! \u0026#34;$TERM\u0026#34; =~ tmux ]] \u0026amp;\u0026amp; [ -z \u0026#34;$TMUX\u0026#34; ]; then # with exec command, on exiting tmux the terminal is closed # also with exec, on opening a second window no duplicate session is catched # on this config, new window can be run from the terminal `st -t \u0026#34;name\u0026#34;` # exec tmux new -s server # alternatively just run tmux (but duplicate session detected) tmux new -s server fi Windows Tmux windows are equivalent to tabs in web browsers, it allows you to open multiple command line prompts. Each window can hold multiple panes, but can also be used without them.\nThere are different ways of switching between windows:\n With prefix + 0...9: input the number assigned to the window  Limited to 10 windows, since only one digit is used to change between them   With prefix + ', then input the number  Takes an extra step, but allows to enter any number even if more than one digit is used   With prefix + w: shows a list of windows and preview of each window panes (numbered panes)  This option gives the most info at a glance, and allows for intuitive switching with arrow keys (or vim-style keys hjkl) Sub panes can also be accessed with arrow keys for a fine-grained selection of prompt    # create new window prefix + c # switch to window prefix + 0 ... 9 ### switch inputing number prefix + ` \u0026lt;number\u0026gt; ### switch showing list prefix + w # cycle through windows prefix + n prefix + p # rename window prefix + , # kill window prefix + \u0026amp; Panes  Panes can be used to display multiple terminals in the same window. Side by side terminals or complex configurations can be used here by splitting the window vertically and horizontally Panes can be zoomed in, so one focuses for a moment on it, then goes back to seeing all the panes together Panes can also be resized to give more space to some specific terminal  # split horizontal - omit last \u0026#34; symbol prefix + \u0026#34; \u0026#34; # split vertical prefix + % # move to panel prefix + \u0026lt;arrow key\u0026gt; # cycle through panels prefix + o # kill current panel prefix + x # resize panels prefix + alt + \u0026lt;arrow\u0026gt; # zoom current pane prefix + z # Balance size panels vertically prefix + Alt + 2 # Balance size panels horizontally prefix + Alt + 1 ","permalink":"https://glacierzero.com/blog/tmux_workflow_nov21/","summary":"Tmux has 2 main functions:\n Creating, accessing and managing terminals from a single screen Detaching and reattaching to the session: it allows you to continue were you left  Here I share the workflow I use everyday at work and my personal computer, explaining with it what I believe are the core features of tmux.\nWhy tmux tmux is a tool to organize yourself in your terminal:\n create and close windows names windows for easier organization split windows vertically and/or horizontally into panes as much as you want focus on some specific pane move around between windows and panes detach from a session and come back days later and continue everything were you left it share sessions between computers  Many of these things can be achieved with other tools, or combination of tools.","title":"tmux: get more productive with a workflow to interact with the terminal and command line"},{"content":" Hi there! I am Plácido. Welcome to my personal site.\nI am a Computing Engineer doing computing science at CERN. I currently work on design, architecture and development of software for future detectors for High Energy Physics.\nI did my PhD in Computer Science and Technology at CERN, in the LHCb experiment, with University Carlos III of Madrid.\nPrior to my experience in Computing for High Energy Physics I worked in the space industry, at GMV, developing software for satellite control centers. Before that I did an intership at Thales in the rail signaling area.\nScientific publications  My ResearchGate profile My Google Scholar profile    My PhD thesis: Particle Tracking and Identification on multi- and many-core hardware platforms\n   A Parallel-Computing Algorithm for High-Energy Physics Particle Tracking and Decoding Using GPU Architectures Allen: A High-Level Trigger on GPUs for LHCb Compass SPMD: a SPMD vectorized tracking algorithm Compass SPMD: a SPMD vectorized tracking algorithm - poster Key4hep: Status and Plans Key4hep — Turnkey Software for Future Colliders LHCb Upgrade GPU High Level Trigger Technical Design Report Parallelizing and Optimizing LHCb-Kalman for Intel Xeon Phi KNL Processors Fast Kalman Filtering: new approaches for the LHCb upgrade CompassUT : study of a GPU track reconstruction for LHCb upgrades  ","permalink":"https://glacierzero.com/about/","summary":"Hi there! I am Plácido. Welcome to my personal site.\nI am a Computing Engineer doing computing science at CERN. I currently work on design, architecture and development of software for future detectors for High Energy Physics.\nI did my PhD in Computer Science and Technology at CERN, in the LHCb experiment, with University Carlos III of Madrid.\nPrior to my experience in Computing for High Energy Physics I worked in the space industry, at GMV, developing software for satellite control centers.","title":"About me"},{"content":"","permalink":"https://glacierzero.com/tags/","summary":"","title":"Tags"}]